// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  roles     Role[]
  Token     Token[]
  Profile   Profile?

  customerOrders Order[] @relation("CustomerOrder")
  courierOrders  Order[] @relation("CourierOrder")

  @@map("users")
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  userAgent String   @map("user_agent")

  @@map("tokens")
}

model Profile {
  id          String    @id @default(uuid())
  name        String?
  surname     String?
  patronymic  String?
  gender      String?
  birthday    DateTime? @db.Date
  address     String?
  phoneNumber String?   @map("phone_number")
  userId      String    @unique
  telegramId  String?   @unique @map("telegram_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model OrderItems {
  id      Int     @id @default(autoincrement())
  orderId Int     @map("order_id")
  url     String
  count   Int
  note    String?

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Order {
  id           Int      @id @default(autoincrement())
  customerId   String   @map("customer_id")
  promo        String?
  status       String?  @default("Неизвестно")
  deliveryType String?  @map("delivery_type")
  courierId    String?  @map("courier_id")
  price        Int?
  rate         Int?
  qr           String?
  paid         Boolean  @default(false)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  customer User         @relation("CustomerOrder", fields: [customerId], references: [id])
  courier  User?        @relation("CourierOrder", fields: [courierId], references: [id])
  items    OrderItems[]

  @@map("orders")
}

enum Role {
  ADMIN
  USER
  COURIER
}
